london <- bind_rows(london, .id = "Category") %>%
select(-Notes)
london
winners <- london %>%
rename(Time = `Time(h:m:s)`) %>%
mutate(Time = chron(times = Time)) %>%
mutate(Year = gsub("\\[|*.\\]", "", Year),
Year = as.numeric(Year))
winners
library(robotstxt)
paths_allowed("http://www.op.gg/champions")
library(tidyverse)
library(rvest)
library(stringr)
page <- read_html("http://www.op.gg/champions")
typeof(page)
class(page)
str(page)
champions <- page %>%
html_nodes("strong.flex-1.truncate.text-xs.max-[420px]:sr-only") %>%
html_text()
page %>%
html_nodes("strong.flex-1.truncate.text-xs") %>%
html_text()
page %>%
html_nodes("div.") %>%
html_text()
page %>%
html_nodes("div.flex md:w-auto") %>%
html_text()
champions <- page %>%
html_nodes("strong.flex-1.truncate.text-xs.max-[420px]:sr-only") %>%
html_text()
champions <- page %>%
html_nodes("strong.flex-1.truncate.text-xs.max-\\[420px\\]:sr-only") %>%
html_text()
champions <- page %>%
html_nodes("strong.flex-1.truncate.text-xs.max-\\[420px\\]") %>%
html_text()
champions
champions <- page %>%
html_nodes(xpath = "//strong[contains(@class, 'flex-1') and contains(@class, 'truncate') and contains(@class, 'text-xs')]") %>%
html_text()
champions
library(robotstxt)
paths_allowed("https://en.wikipedia.org/wiki/List_of_best-selling_video_games")
library(tidyverse)
library(rvest)
library(stringr)
page <- read_html("https://en.wikipedia.org/wiki/List_of_best-selling_video_games")
typeof(page)
class(page)
str(page)
table <- page %>%
html_node(".wikitable") %>%
html_table(fill = TRUE)
table
head(table)
library(robotstxt)
paths_allowed("https://en.wikipedia.org/wiki/List_of_best-selling_video_games")
library(tidyverse)
library(rvest)
library(stringr)
page <- read_html("https://en.wikipedia.org/wiki/List_of_best-selling_video_games")
typeof(page)
class(page)
str(page)
table <- page %>%
html_node(".wikitable") %>%
html_table(fill = TRUE)
table <- page %>%
html_node(".wikitable") %>%
html_table(fill = TRUE) %>%
as_tibble()
table
str(table)
install.packages("writexl")
library(writexl)
# 导出为 Excel 文件
write_xlsx(table, "best_selling_video_games.xlsx")
setwd("E:/RS/workshop")
library(ggplot2)
library(tidyverse)
library(gt)
install.packages("gt")
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
install.packages("moderndive")
library(moderndive)
cats <- read.csv("cats.csv")
cats <- read.csv("cats.csv")
pwd
getwd()
setwd("E:/RS/workshop")
Sys.setenv(TMPDIR = "E:/Temp")
getwd()
file.edit("~/.Rprofile")
quarto install tinytex
install.packages("tinytex")
tinytex::install_tinytex()
cats |>
summarize('Mean' = mean(Hwt),
'Median' = median(Hwt),
'St.Dev' = sd(Hwt),
'Min' = min(Hwt),
'Max' = max(Hwt),
'IQR' = quantile(Hwt,0.75)-quantile(Hwt,0.25),
'Sample_size' = n(),
.by = Sex) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
setwd("E:/RS/workshop")
library(ggplot2)
library(tidyverse)
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
cats <- read.csv("cats.csv")
cats |>
summarize('Mean' = mean(Hwt),
'Median' = median(Hwt),
'St.Dev' = sd(Hwt),
'Min' = min(Hwt),
'Max' = max(Hwt),
'IQR' = quantile(Hwt,0.75)-quantile(Hwt,0.25),
'Sample_size' = n(),
.by = Sex) |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
load("Glasgow_Edinburgh_SIMD2020.RData")
Glasgow_Ed_SIMD2020_tidy1 <- gather(data = Glasgow_Ed_SIMD2020,
key = Type_of_Rank,
value = Rank,
SIMD_Rank:Housing_Rank)
library(tidyr)
Glasgow_Ed_SIMD2020_tidy1 <- gather(data = Glasgow_Ed_SIMD2020,
key = Type_of_Rank,
value = Rank,
SIMD_Rank:Housing_Rank)
Glasgow_Ed_SIMD2020_tidy1
Glasgow_Ed_SIMD2020_tidy1$Type_of_Rank <-
str_replace(Glasgow_Ed_SIMD2020_tidy1$Type_of_Rank, "_Rank", "")
library(stringr)
Glasgow_Ed_SIMD2020_tidy1$Type_of_Rank <-
str_replace(Glasgow_Ed_SIMD2020_tidy1$Type_of_Rank, "_Rank", "")
Glasgow_Ed_SIMD2020_tidy1
Glasgow_Ed_SIMD2020
glimpse(Glasgow_Ed_SIMD2020_tidy1)
glimp(Glasgow_Ed_SIMD2020_tidy1)
glimpse(Glasgow_Ed_SIMD2020)
head(Glasgow_Ed_SIMD2020)
unique(Glasgow_Ed_SIMD2020_tidy1$Type_of_Rank)
setwd("E:/RS/workshop")
library(robotstxt)
paths_allowed("https://ourworldindata.org/grapher/unemployment-rate?tab=table&time=2022..latest")
library(tidyverse)
library(rvest)
library(stringr)
page <- read_html("https://ourworldindata.org/grapher/unemployment-rate?tab=table&time=2022..latest")
percentage_text <- page %>%
html_nodes(".dimension.dimension-start") %>%
html_text()
percentage_text
percentage_text <- page %>%
html_nodes("dimension dimension-start") %>%
html_text()
percentage_text
percentage_text <- page %>%
html_nodes(".table-wrapper") %>%
html_text()
percentage_text
percentage_text <- page %>%
html_nodes(".DataTable") %>%
html_text()
setwd("~/GitHub/groupwork/DAS_G26")
library(ggplot2)
library(glmnet)
library(tidyverse)
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
library(skimr)
data <- read.csv('dataset26.csv', na.strings = '?,')
data <- na.omit(data)
data <- data %>%
mutate(across(2:ncol(data), ~ substr(.x, 1, nchar(.x) - 1)))
write.csv(data, 'cleaned_data.csv', row.names = FALSE)
data$Income <- ifelse(data$Income == "<=50", 0, 1)
data$Education <- as.factor(data$Education)
data$Marital_Status <- as.factor(data$Marital_Status)
data$Occupation <- as.factor(data$Occupation)
data$Sex <- as.factor(data$Sex)
data$Hours_PW <- as.numeric(data$Hours_PW)
data$Nationality <- as.factor(data$Nationality)
str(data)
model <- glm(Income ~ Age + Education + Marital_Status + Occupation + Sex + Hours_PW + Nationality,
data = data,
family = binomial)
summary(model)
coef_table <- summary(model)$coefficients
coef_df <- as.data.frame(coef_table)
significant_vars <- coef_df[coef_df$`Pr(>|z|)` < 0.05, ]
significant_vars
# Order education level
edu_levels <- c(
"Preschool", "1st-4th", "5th-6th", "7th-8th", "9th", "10th",
"11th", "12th", "HS-grad", "Some-college", "Assoc-acdm",
"Assoc-voc", "Bachelors", "Masters", "Prof-school", "Doctorate"
)
data$Education <- factor(data$Education, levels = edu_levels, ordered = TRUE)
data$Education <- as.numeric(data$Education)
# Order nationality level
data$Nationality <- as.factor(data$Nationality)
data$Nationality <- as.numeric(data$Nationality)
# Merge Occupation
levels(data$Occupation) <- ifelse(levels(data$Occupation) %in% c("Exec-managerial"),
levels(data$Occupation), "Other")
data$Occupation <- factor(data$Occupation)
data$Occupation <- relevel(data$Occupation, ref = "Other") # Set “Other” as the base group
# Merge Marital Status
levels(data$Marital_Status) <- ifelse(levels(data$Marital_Status) %in% c("Married-civ-spouse"),
levels(data$Marital_Status), "Other")
data$Marital_Status <- factor(data$Marital_Status)
data$Marital_Status <- relevel(data$Marital_Status, ref = "Other") # Set “Other” as the base group
model_new <- glm(Income ~ Age + Education + Marital_Status + Occupation + Sex + Hours_PW + Nationality,
data = data,
family = binomial)
summary(model_new)
stepwise_model <- step(model_new, direction = "both", trace = 0)
summary(stepwise_model)
stepwise_aic <- AIC(stepwise_model)
print(paste("Stepwise AIC: ", stepwise_aic))
num_data <- data[, sapply(data, is.numeric)]
cor_matrix <- cor(num_data)
print(cor_matrix)
data_encoded <- model.matrix(~ Marital_Status + Occupation + Sex- 1, data = data)
cor_matrix_encoded <- cor(data_encoded)
print(cor_matrix_encoded)
x <- model.matrix(Income ~ Age + Education + Marital_Status + Occupation + Sex + Hours_PW + Nationality - 1, data = data)
y <- data$Income
cv_lasso <- cv.glmnet(x, y, alpha = 1, family = "binomial")
print(paste("Best lambda for Lasso: ", cv_lasso$lambda.min))
plot(cv_lasso)
final_lasso_model <- glmnet(x, y, alpha = 1, lambda = cv_lasso$lambda.min)
coef(final_lasso_model)
# Extract coefficients from the model_new
coefnew_df <- as.data.frame(summary(model_new)$coefficients)
coefnew_df$Variable <- rownames(coefnew_df)
coefnew_df <- coefnew_df[coefnew_df$`Pr(>|z|)` < 0.05, ]
coefnew_df$Odds_Ratio <- exp(coefnew_df$Estimate)
ggplot(coef_df, aes(x = reorder(Variable, Estimate), y = Estimate)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = Estimate - `Std. Error`, ymax = Estimate + `Std. Error`), width = 0.2) +
coord_flip() +
theme_minimal() +
labs(title = "Log-Odds of Significant Variables",
x = "Variables",
y = "Log-Odds (Coefficient)")
ggplot(coefnew_df, aes(x = reorder(Variable, Estimate), y = Estimate)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = Estimate - `Std. Error`, ymax = Estimate + `Std. Error`), width = 0.2) +
coord_flip() +
theme_minimal() +
labs(title = "Log-Odds of Significant Variables",
x = "Variables",
y = "Log-Odds (Coefficient)")
ggplot(coefnew_df, aes(x = reorder(Variable, Estimate), y = Estimate)) +
geom_bar(stat = "identity", fill = "steelblue") +
geom_errorbar(aes(ymin = Estimate - `Std. Error`, ymax = Estimate + `Std. Error`), width = 0.2) +
coord_flip() +
theme_minimal() +
labs(title = "Log-Odds of Significant Variables",
x = "Variables",
y = "Log-Odds (Coefficient)")
numeric_vars <- sapply(data, is.numeric)
data_numeric <- data[, numeric_vars]
# Plot the density graph
par(mfrow=c(2,2))  # 2x2
for (var in names(data_numeric)) {
plot(density(data_numeric[[var]]),
col = "blue",
main = paste("Density Plot of", var),
xlab = var)
}
names(data_numeric)
data_numeric
# Define colors
colors <- c("red", "blue")
# Generate Age vs. Income boxplot
plot_age <- ggplot(data, aes(x = factor(Income), y = Age, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Age') +
ggtitle('Age vs. Income Boxplot') +
theme_minimal()
# Generate Education vs. Income boxplot
plot_education <- ggplot(data, aes(x = factor(Income), y = Education, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Education Level') +
ggtitle('Education Level vs. Income Boxplot') +
theme_minimal()
# Generate Marital Status vs. Income boxplot
plot_marital_status <- ggplot(data, aes(x = factor(Income), y = Marital_Status, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Marital Status') +
ggtitle('Marital Status vs. Income Boxplot') +
theme_minimal()
# Generate Occupation vs. Income boxplot
plot_occupation <- ggplot(data, aes(x = factor(Income), y = Occupation, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Occupation') +
ggtitle('Occupation vs. Income Boxplot') +
theme_minimal()
# Generate Sex vs. Income boxplot
plot_sex <- ggplot(data, aes(x = factor(Income), y = Sex, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Sex') +
ggtitle('Sex vs. Income Boxplot') +
theme_minimal()
# Generate Hours per Week vs. Income boxplot
plot_hours <- ggplot(data, aes(x = factor(Income), y = Hours_PW, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Hours per Week') +
ggtitle('Hours per Week vs. Income Boxplot') +
theme_minimal()
# Arrange all boxplots in a grid layout
grid.arrange(plot_age, plot_education, plot_marital_status,
plot_occupation, plot_sex, plot_hours,
ncol = 3)
View(data_numeric)
# Define colors
colors <- c("red", "blue")
# Generate Age vs. Income boxplot
plot_age <- ggplot(data, aes(x = factor(Income), y = Age, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Age') +
ggtitle('Age vs. Income Boxplot') +
theme_minimal()
# Generate Education vs. Income boxplot
plot_education <- ggplot(data, aes(x = factor(Income), y = Education, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Education Level') +
ggtitle('Education Level vs. Income Boxplot') +
theme_minimal()
# Generate Hours per Week vs. Income boxplot
plot_hours <- ggplot(data, aes(x = factor(Income), y = Hours_PW, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Hours per Week') +
ggtitle('Hours per Week vs. Income Boxplot') +
theme_minimal()
# Arrange all boxplots in a grid layout
grid.arrange(plot_age, plot_education, plot_marital_status,
plot_occupation, plot_sex, plot_hours,
ncol = 3)
# Load necessary libraries
library(ggplot2)
library(gridExtra)
# Define colors
colors <- c("red", "blue")
# Generate Age vs. Income boxplot
plot_age <- ggplot(data, aes(x = factor(Income), y = Age, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Age') +
ggtitle('Age vs. Income Boxplot') +
theme_minimal()
# Generate Education vs. Income boxplot
plot_education <- ggplot(data, aes(x = factor(Income), y = Education, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Education Level') +
ggtitle('Education Level vs. Income Boxplot') +
theme_minimal()
# Generate Hours per Week vs. Income boxplot
plot_hours <- ggplot(data, aes(x = factor(Income), y = Hours_PW, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Hours per Week') +
ggtitle('Hours per Week vs. Income Boxplot') +
theme_minimal()
# Generate Nationality vs. Income boxplot
plot_nationality <- ggplot(data, aes(x = factor(Income), y = Nationality, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Nationality') +
ggtitle('Nationality vs. Income Boxplot') +
theme_minimal()
# Arrange all boxplots in a grid layout
grid.arrange(plot_age, plot_education, plot_hours, plot_nationality,
ncol = 3)
# Define colors
colors <- c("red", "blue")
# Generate Age vs. Income boxplot
plot_age <- ggplot(data, aes(x = factor(Income), y = Age, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Age') +
ggtitle('Age vs. Income Boxplot') +
theme_minimal()
# Generate Hours per Week vs. Income boxplot
plot_hours <- ggplot(data, aes(x = factor(Income), y = Hours_PW, fill = factor(Income))) +
geom_boxplot() +
scale_fill_manual(values = colors) +
xlab('Income') +
ylab('Hours per Week') +
ggtitle('Hours per Week vs. Income Boxplot') +
theme_minimal()
# Arrange all boxplots in a grid layout
grid.arrange(plot_age, plot_hours, ncol = 2)
mod.coed.logodds<- model_new %>%
summary() %>%
coef()
plot_model(model_new,show.values = TRUE,transform = NULL, title = "Log-Odds",show.p = FALSE)
install.packages("sjPlot")
library(sjPlot)
mod.coed.logodds<- model_new %>%
summary() %>%
coef()
plot_model(model_new,show.values = TRUE,transform = NULL, title = "Log-Odds",show.p = FALSE)
mod.coed.logodds<- coefnew_df
plot_model(model_new,show.values = TRUE,transform = NULL, title = "Log-Odds",show.p = FALSE)
#| label: Odds
mod.coed.logodds<- model_new %>%
summary() %>%
coef()
plot_model(model_new,show.values = TRUE,transform = NULL, title = "Log-Odds",show.p = FALSE)
model_new %>%
coef() %>%
exp()
#| label: Odds
mod.coed.logodds<- model_new %>%
summary() %>%
coef()
plot_model(model_new, show.values = TRUE, transform = NULL,
title = "Log-Odds", show.p = FALSE)
model_new %>%
coef() %>%
exp()
plot_model(model_new, show.values = TRUE, axis.lim=c(0,10000),
title = "Odds Ratio", show.p = FALSE)
#| label: Odds
mod.coed.logodds<- model_new %>%
summary() %>%
coef()
plot_model(model_new, show.values = TRUE, transform = NULL,
title = "Log-Odds", show.p = FALSE)
plot_model(model_new, show.values = TRUE, axis.lim = c(0, 10000),
title = "Odds Ratio", show.p = FALSE, transform = "exp")
#| label: New model
model_new <- glm(Income ~ Age + Education + Marital_Status + Occupation + Sex + Hours_PW + Nationality,
data = data,
family = binomial)
summary(model_new)
plot_model(model_new, type = "pred", title = "",
axis.title = c("x", "Prob. of income >50K"))
plot_model(model_new, type = "pred", terms="Age" ,title = "Age",
axis.title = c("Age", "Prob. of income >50K")
)
plot_model(model_new, type = "pred", terms="Age" ,title = "Age [all]",
axis.title = c("Age", "Prob. of income >50K"))
plot_model(model_new, type = "pred", terms="Age [all]" ,title = "Age",
axis.title = c("Age", "Prob. of income >50K"))
#| label: Probability
p1 <- plot_model(model_new, type = "pred", terms="Age" ,title = "Age",
axis.title = c("Age", "Prob. of income >50K"))
p2 <- plot_model(model_new, type = "pred", terms="Hours_PW" ,title = "Hours_PW",
axis.title = c("Hours_PW", "Prob. of income >50K"))
grid.arrange(p1,p2,nrow=2)
